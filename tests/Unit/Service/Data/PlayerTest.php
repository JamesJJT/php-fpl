<?php

use Jamesjjt\PhpFpl\Dto\PlayerFullDto;
use Jamesjjt\PhpFpl\Dto\PlayerSimpleDto;
use Jamesjjt\PhpFpl\Enums\TeamID;
use Jamesjjt\PhpFpl\Service\Data\Players;

it('returns a specific player by id', function () {
    $player = (new Players)->getPlayerById(1);

    expect($player)
        ->toBeInstanceOf(PlayerFullDto::class)
        ->toHaveKey('can_transact')
        ->toHaveKey('can_select')
        ->toHaveKey('chance_of_playing_next_round')
        ->toHaveKey('chance_of_playing_this_round')
        ->toHaveKey('code')
        ->toHaveKey('cost_change_event')
        ->toHaveKey('cost_change_event_fall')
        ->toHaveKey('cost_change_start')
        ->toHaveKey('cost_change_start_fall')
        ->toHaveKey('dreamteam_count')
        ->toHaveKey('element_type')
        ->toHaveKey('ep_next')
        ->toHaveKey('ep_this')
        ->toHaveKey('event_points')
        ->toHaveKey('first_name')
        ->toHaveKey('form')
        ->toHaveKey('id')
        ->toHaveKey('in_dreamteam')
        ->toHaveKey('news')
        ->toHaveKey('news_added')
        ->toHaveKey('now_cost')
        ->toHaveKey('photo')
        ->toHaveKey('points_per_game')
        ->toHaveKey('removed')
        ->toHaveKey('second_name')
        ->toHaveKey('selected_by_percent')
        ->toHaveKey('special')
        ->toHaveKey('squad_number')
        ->toHaveKey('status')
        ->toHaveKey('team')
        ->toHaveKey('team_code')
        ->toHaveKey('total_points')
        ->toHaveKey('transfers_in')
        ->toHaveKey('transfers_in_event')
        ->toHaveKey('transfers_out')
        ->toHaveKey('transfers_out_event')
        ->toHaveKey('value_form')
        ->toHaveKey('value_season')
        ->toHaveKey('web_name')
        ->toHaveKey('region')
        ->toHaveKey('team_join_date')
        ->toHaveKey('minutes')
        ->toHaveKey('goals_scored')
        ->toHaveKey('assists')
        ->toHaveKey('clean_sheets')
        ->toHaveKey('goals_conceded')
        ->toHaveKey('own_goals')
        ->toHaveKey('penalties_saved')
        ->toHaveKey('penalties_missed')
        ->toHaveKey('yellow_cards')
        ->toHaveKey('red_cards')
        ->toHaveKey('saves')
        ->toHaveKey('bonus')
        ->toHaveKey('bps')
        ->toHaveKey('influence')
        ->toHaveKey('creativity')
        ->toHaveKey('threat')
        ->toHaveKey('ict_index')
        ->toHaveKey('starts')
        ->toHaveKey('expected_goals')
        ->toHaveKey('expected_assists')
        ->toHaveKey('expected_goal_involvements')
        ->toHaveKey('expected_goals_conceded')
        ->toHaveKey('influence_rank')
        ->toHaveKey('influence_rank_type')
        ->toHaveKey('creativity_rank')
        ->toHaveKey('creativity_rank_type')
        ->toHaveKey('threat_rank')
        ->toHaveKey('threat_rank_type')
        ->toHaveKey('ict_index_rank')
        ->toHaveKey('ict_index_rank_type')
        ->toHaveKey('corners_and_indirect_freekicks_order')
        ->toHaveKey('corners_and_indirect_freekicks_text')
        ->toHaveKey('direct_freekicks_order')
        ->toHaveKey('direct_freekicks_text')
        ->toHaveKey('penalties_order')
        ->toHaveKey('penalties_text')
        ->toHaveKey('expected_goals_per_90')
        ->toHaveKey('saves_per_90')
        ->toHaveKey('expected_assists_per_90')
        ->toHaveKey('expected_goal_involvements_per_90')
        ->toHaveKey('expected_goals_conceded_per_90')
        ->toHaveKey('goals_conceded_per_90')
        ->toHaveKey('now_cost_rank')
        ->toHaveKey('now_cost_rank_type')
        ->toHaveKey('form_rank')
        ->toHaveKey('form_rank_type')
        ->toHaveKey('points_per_game_rank')
        ->toHaveKey('points_per_game_rank_type')
        ->toHaveKey('selected_rank')
        ->toHaveKey('selected_rank_type')
        ->toHaveKey('starts_per_90')
        ->toHaveKey('clean_sheets_per_90');

});

it('returns a specific player in simple format, if requested', function () {
    $player = (new Players)->getPlayerById(1, true);

    expect($player)
        ->toBeInstanceOf(PlayerSimpleDto::class)
        ->toHaveKey('can_transact');

    $this->assertObjectNotHasProperty('creativity_rank_type', $player);
});

it('throws an exception if player is not found', function () {
    (new Players)->getPlayerById(12345435346546634);
})->throws(Exception::class, 'Player ID: 12345435346546634 not found.');

it('returns an array of players for a specific team', function () {
    $players = (new Players)->getPlayersByTeam(TeamID::Arsenal);

    foreach ($players as $player) {
        expect($player)
            ->toBeInstanceOf(PlayerFullDto::class)->toHaveKey('can_transact')
            ->toHaveKey('can_select')
            ->toHaveKey('chance_of_playing_next_round')
            ->toHaveKey('chance_of_playing_this_round')
            ->toHaveKey('code')
            ->toHaveKey('cost_change_event')
            ->toHaveKey('cost_change_event_fall')
            ->toHaveKey('cost_change_start')
            ->toHaveKey('cost_change_start_fall')
            ->toHaveKey('dreamteam_count')
            ->toHaveKey('element_type')
            ->toHaveKey('ep_next')
            ->toHaveKey('ep_this')
            ->toHaveKey('event_points')
            ->toHaveKey('first_name')
            ->toHaveKey('form')
            ->toHaveKey('id')
            ->toHaveKey('in_dreamteam')
            ->toHaveKey('news')
            ->toHaveKey('news_added')
            ->toHaveKey('now_cost')
            ->toHaveKey('photo')
            ->toHaveKey('points_per_game')
            ->toHaveKey('removed')
            ->toHaveKey('second_name')
            ->toHaveKey('selected_by_percent')
            ->toHaveKey('special')
            ->toHaveKey('squad_number')
            ->toHaveKey('status')
            ->toHaveKey('team')
            ->toHaveKey('team_code')
            ->toHaveKey('total_points')
            ->toHaveKey('transfers_in')
            ->toHaveKey('transfers_in_event')
            ->toHaveKey('transfers_out')
            ->toHaveKey('transfers_out_event')
            ->toHaveKey('value_form')
            ->toHaveKey('value_season')
            ->toHaveKey('web_name')
            ->toHaveKey('region')
            ->toHaveKey('team_join_date')
            ->toHaveKey('minutes')
            ->toHaveKey('goals_scored')
            ->toHaveKey('assists')
            ->toHaveKey('clean_sheets')
            ->toHaveKey('goals_conceded')
            ->toHaveKey('own_goals')
            ->toHaveKey('penalties_saved')
            ->toHaveKey('penalties_missed')
            ->toHaveKey('yellow_cards')
            ->toHaveKey('red_cards')
            ->toHaveKey('saves')
            ->toHaveKey('bonus')
            ->toHaveKey('bps')
            ->toHaveKey('influence')
            ->toHaveKey('creativity')
            ->toHaveKey('threat')
            ->toHaveKey('ict_index')
            ->toHaveKey('starts')
            ->toHaveKey('expected_goals')
            ->toHaveKey('expected_assists')
            ->toHaveKey('expected_goal_involvements')
            ->toHaveKey('expected_goals_conceded')
            ->toHaveKey('influence_rank')
            ->toHaveKey('influence_rank_type')
            ->toHaveKey('creativity_rank')
            ->toHaveKey('creativity_rank_type')
            ->toHaveKey('threat_rank')
            ->toHaveKey('threat_rank_type')
            ->toHaveKey('ict_index_rank')
            ->toHaveKey('ict_index_rank_type')
            ->toHaveKey('corners_and_indirect_freekicks_order')
            ->toHaveKey('corners_and_indirect_freekicks_text')
            ->toHaveKey('direct_freekicks_order')
            ->toHaveKey('direct_freekicks_text')
            ->toHaveKey('penalties_order')
            ->toHaveKey('penalties_text')
            ->toHaveKey('expected_goals_per_90')
            ->toHaveKey('saves_per_90')
            ->toHaveKey('expected_assists_per_90')
            ->toHaveKey('expected_goal_involvements_per_90')
            ->toHaveKey('expected_goals_conceded_per_90')
            ->toHaveKey('goals_conceded_per_90')
            ->toHaveKey('now_cost_rank')
            ->toHaveKey('now_cost_rank_type')
            ->toHaveKey('form_rank')
            ->toHaveKey('form_rank_type')
            ->toHaveKey('points_per_game_rank')
            ->toHaveKey('points_per_game_rank_type')
            ->toHaveKey('selected_rank')
            ->toHaveKey('selected_rank_type')
            ->toHaveKey('starts_per_90')
            ->toHaveKey('clean_sheets_per_90');
    }
    expect($players)
        ->toBeArray();
});

it('returns an array of players for a specific team in simple format, if requested', function () {
    $players = (new Players)->getPlayersByTeam(TeamID::Arsenal, true);

    expect($players[0])
        ->toBeInstanceOf(PlayerSimpleDto::class);

    $this->assertObjectNotHasProperty('creativity_rank_type', $players[0]);
});
